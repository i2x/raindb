#----------------------------------------------
#    MODIFIED K-NN METHOD-- FORECAST ALL YEARS
#----------------------------------------------

# 1. Use y-hat from the locfit model 
#    (fpredicted.loc$fit and cpredicted.loc$fit)
# 2. The residuals from the locfit model will be used 
#    (residuals(locf.model), residuals(locc.model))
# 3. Get the distance between the predicted point x values
#    and the x values for all points in the model (will get the 
#    Euclidean distance of the normalized values) 
# 4. Pick the K (based on heuristic scheme) nearest neighbors
# 5. Weight the K nearest neighbors 
# 6. The weighted K-NN residuals will then be used in a bootstrap
     
# LOAD REQUIRED PACKAGE FOR FORECASTING
library(akima)		# load the package "akima"
library(locfit)		# load the package "locfit"

# LOAD RAINFALL DATA
mon_names=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
mon_names=c("MJJ")
G_rain=c("HIR","NIR","LIR","Averg50")
n_rain=length(G_rain)
rain_file="rainfall4G"
rain_name=paste(rain_file,".txt",sep="")
rf=matrix(scan(rain_name,na.strings="NA"),byrow=T,ncol=(n_rain+2))
n_rr=nrow(rf)
sy_rain=rf[1,1]
ye_rain=rf[n_rr,1]

no_rain=4		# rainfall data required to run model e.g. NIR (change as needed)
yfVol_obs=rf[,(no_rain+2)]

# LOAD INDEX DATA
pred_index=c("SAT","SLP","SXW","SYW","RAIN")	# predictors of seasonal rainfall
unit=c("C","mb","m/s","m/s","mm")
n_pred=length(pred_index)
pred_fname=paste(G_rain[no_rain],"_",mon_names,"_GCMpreds.txt",sep="")
pred=matrix(scan(pred_fname,na.strings="NA"),byrow=T,ncol=(n_pred+2))
n_rp=nrow(pred)
n_cp=ncol(pred)
sy_pred=pred[1,1]
ye_pred=pred[n_rp,1]

fpreds1=pred[,3:n_cp]

# INITIAL VALUES OF FORECASTING
const=sy_rain
sy=1960			# sy is the starting year of simulation - e.g. 1980 for post 1980 forecast (change as needed)
ye=2007			# ye is the ending year of simulation (change as needed)
SS=(sy-const)*12+1	# simulation starting point
se=(ye-const+1)*12	# simulation ending point
yf=(ye-sy+1)*12		# yf is the number of data to forecast
ty=ye-sy+1		# number of forecasted years
yr=c(sy:ye)		# forecasted year
max_lag=8		# maximum lag time (change as needed)
n_simul=300		# number of simulations

mth=5			# starting month of season
mon=7			# ending month of season

# SET UP VARIABLES FOR FORECASTING MODEL
yfVol_preds=yfVol_obs[SS:se]
year=rf[SS:se,1]
month=rf[SS:se,2]

for(v in max_lag:max_lag)	# predictors by lag time
{
if(v == 1)
{fpreds=cbind(fpreds1[,3])
name_p=paste(pred_index[3],sep="")}
if(v == 2)
{fpreds=cbind(fpreds1[,3])
name_p=paste(pred_index[3],sep="")}
if(v == 3)
{fpreds=cbind(fpreds1[,2])
name_p=paste(pred_index[2],sep="")}
if(v == 4)
{fpreds=cbind(fpreds1[,1])
name_p=paste(pred_index[1],sep="")}
if(v == 5)
{fpreds=cbind(fpreds1[,1])
name_p=paste(pred_index[1],sep="")}
if(v == 6)
{fpreds=cbind(fpreds1[,3])
name_p=paste(pred_index[3],sep="")}
if(v == 7)
{fpreds=cbind(fpreds1[,4])
name_p=paste(pred_index[4],sep="")}
if(v == 8)
{fpreds=cbind(fpreds1[,4])
name_p=paste(pred_index[4],sep="")}
if(v == 9)
{fpreds=cbind(fpreds1[,4],fpreds1[,5])
name_p=paste(pred_index[4],"_",pred_index[5],sep="")}
if(v == 10)
{fpreds=cbind(fpreds1[,4])
name_p=paste(pred_index[4],sep="")}
if(v == 11)
{fpreds=cbind(fpreds1[,4])
name_p=paste(pred_index[4],sep="")}
if(v == 12)
{fpreds=cbind(fpreds1[,1])
name_p=paste(pred_index[1],sep="")}

X_preds=fpreds[(SS-v-3):(SS-v-3-1+yf),]
cX_preds=ncol(fpreds)
DF=data.frame(year,month,X_preds,yfVol_preds)
DF=subset(DF,DF$month>(mth-1))
DF=subset(DF,DF$month<(mon+1))

XP1=matrix(nrow=ty,ncol=cX_preds)
yfVol1=matrix(nrow=ty,ncol=1)
for(e in 1:ty)
{
sDF=subset(DF,DF$year==yr[e])
sDF=na.exclude(sDF)
ro=length(sDF$year)
if(ro != 3)
{XP1[e,]=NA
yfVol1[e,]=NA}
if(ro == 3)
{for(b in 1:cX_preds)
{XP1[e,b]=mean(sDF[,(b+2)])}
yfVol1[e,]=sum(sDF$yfVol_preds)}
}

DF2=data.frame(yr,XP1,yfVol1)
DF2=na.exclude(DF2)	# exclude missing values

YR=DF2$yr
yfVol=DF2$yfVol1
ys=length(yfVol)		# number of forecasting years exclude missing data
X=matrix(nrow=ys,ncol=cX_preds)
for(b in 1:cX_preds)
{X[,b]=DF2[,(b+1)]}

ensemblef_1=array(dim=c(ys,(n_simul+2)))
ensemblef_1[,1]=YR
ensemblef_1[,2]=yfVol

y_lnr=array(dim=c(ys,(n_simul+2)))
y_lnr[,1]=YR
y_lnr[,2]=yfVol

# RUN FORECASTING MODEL
p=1			# p is number of predictors - i.e. only SST in this case (change as needed)
XX=scale(X)         	# normalize predictors (so higher magnitude variables don't get more weight in distance calculation)

for(i in 1:ys)		# yearly loop
{
  # p1 is the position of the year we're predicting
  p1=i               
  xpred=X[p1,]  
  yfpred=yfVol[p1]
  
  if(cX_preds==1){
  if(p1 == 1)
  {
     xmodel=X[(p1+1):ys]
     yfmodel=yfVol[(p1+1):ys]      
  }        
  if(p1 == ys)
  {
      xmodel=X[1:(ys-1)]
      yfmodel=yfVol[1:(ys-1)]       
  }
  if(p1 != 1 && p1 != ys)
  {                               
      xmodel=c(X[1:(p1-1)],X[(p1+1):ys])
      yfmodel=c(yfVol[1:(p1-1)],yfVol[(p1+1):ys])
  }}

  if(cX_preds!=1){
  if(p1 == 1)
  {
     xmodel=X[(p1+1):ys,]
     yfmodel=yfVol[(p1+1):ys]      
  }        
  if(p1 == ys)
  {
      xmodel=X[1:(ys-1),]
      yfmodel=yfVol[1:(ys-1)]       
  }
  if(p1 != 1 && p1 != ys)
  {                               
      xmodel=rbind(X[1:(p1-1),],X[(p1+1):ys,])
      yfmodel=c(yfVol[1:(p1-1)],yfVol[(p1+1):ys])
  }}
  ym=length(yfmodel)        
  
  # Distance calculation
  # calculate the distance between the (predictors of the) point we're predicting and all other points-- use scaled data
  xdist=scale(xmodel)
  distance=1:ym
  for(j in 1:ym)
  {
     if(cX_preds==1)
     distance[j]=sqrt(((XX[p1,1]-xdist[j,1])^2))
     if(cX_preds==2)
     distance[j]=sqrt(((XX[p1,1]-xdist[j,1])^2)+((XX[p1,2]-xdist[j,2])^2))
     if(cX_preds==3)
     distance[j]=sqrt(((XX[p1,1]-xdist[j,1])^2)+((XX[p1,2]-xdist[j,2])^2)+((XX[p1,3]-xdist[j,3])^2))
     if(cX_preds==4)
     distance[j]=sqrt(((XX[p1,1]-xdist[j,1])^2)+((XX[p1,2]-xdist[j,2])^2)+((XX[p1,3]-xdist[j,3])^2)+((XX[p1,4]-xdist[j,4])^2))     
     if(cX_preds==5)
     distance[j]=sqrt(((XX[p1,1]-xdist[j,1])^2)+((XX[p1,2]-xdist[j,2])^2)+((XX[p1,3]-xdist[j,3])^2)+((XX[p1,4]-xdist[j,4])^2)+((XX[p1,5]-xdist[j,5])^2))
  }
  
  # Rank the distances
  drank=rank(distance)       # here rank 1 is the nearest neighbor - i.e. the smallest distance
          
  # Determine K and weight it
  n=length(distance)
  kk=sqrt(n)
  kk=round(kk)
  #kk=20
        	
  W=1:kk 
  W=1/W        
  W=W/sum(W)    
  W=cumsum(W)   
       
  # Find the alpha for the locfit model-- take the alpha which the lowest GCV        
  #if(v!=5){
  alphaf=seq(0.2,1,by=0.05)
  xxf=gcvplot(yfmodel~xmodel,alpha=alphaf)
  zxf=xxf$values
  zzf=order(zxf)
  alphaf=alphaf[zzf[1]]
  #}
  #if(v==1)(alphaf=1)
  #if(v==5)(alphaf=1)
            
  # Do the LOCFIT and get the expected value for each of the p  points
  #locf.model=locfit.raw(xmodel,yfmodel,alpha=alphaf,deg=1,kern="bisq")
  #fit=locf.model

  locf.model=locfit(yfmodel~xmodel,alpha=alphaf)
  fit=locf.model

  # Do the Linear Regression Fit and get the expected value and simulations by random residuals
  lnr.model=lsfit(xmodel,yfmodel)
  if(cX_preds==1)
  yest=lnr.model$coef[1]+xpred[1]*lnr.model$coef[2]
  if(cX_preds==2)
  yest=lnr.model$coef[1]+xpred[1]*lnr.model$coef[2]+xpred[2]*lnr.model$coef[3]
  if(cX_preds==3)
  yest=lnr.model$coef[1]+xpred[1]*lnr.model$coef[2]+xpred[2]*lnr.model$coef[3]+xpred[3]*lnr.model$coef[4]
  if(cX_preds==4)
  yest=lnr.model$coef[1]+xpred[1]*lnr.model$coef[2]+xpred[2]*lnr.model$coef[3]+xpred[3]*lnr.model$coef[4]+xpred[4]*lnr.model$coef[5]
  if(cX_preds==5)
  yest=lnr.model$coef[1]+xpred[1]*lnr.model$coef[2]+xpred[2]*lnr.model$coef[3]+xpred[3]*lnr.model$coef[4]+xpred[4]*lnr.model$coef[5]+xpred[5]*lnr.model$coef[6]
  res=rnorm(n_simul,mean=0,sd=sd(lnr.model$residuals))
  for(h in 1:n_simul)			# simulation loop for linear regression
  {
  y_lnr[i,(h+2)]=yest+res[h]
  if(y_lnr[i,(h+2)]<0)(y_lnr[i,(h+2)]=0)
  y_lnr[i,(h+2)]=round(y_lnr[i,(h+2)],digits=1)
  }			# simulation loop

  # Make the mean prediction
  # hack fix so predict.locfit will work:  make xpred a matrix with the real xpred the first row.  Take first predicted point.
  if(cX_preds==1)  
  xpred1=c(xpred,xmodel)
  if(cX_preds!=1)
  xpred1=rbind(xpred,xmodel)      
  fpredicted.loc=predict(locf.model,xpred1,se.fit=T,band="global")  
        
  # now weight the neighbors and pick one at random (using the weights): do this 100 simulations
  residualsf=residuals(locf.model)    	# get the residuals of the locfit model
  for(k in 1:n_simul)         		# simulation loop (bootstrap residuals)
  {
      rannum=runif(1,0,1)
      xy=c(rannum,W)      # adds a random number (between 0 and 1) to the weight function (CDF)
      rankW=rank(xy)      # assigns a rank to the random number (and W vector)
      pos=order(drank)[rankW[1]]     # gives the position in the distance matrix (and corrrespondingly the y matrix for the selected neighbor)
      resids=residualsf[pos]         # Once getting a neighbor, need to find the residual associated with that neighbor

      ensemblef_1[i,(k+2)]=fpredicted.loc$fit[1]+resids	# add that residual to the mean prediction from the locfit model
      if(ensemblef_1[i,(k+2)]<0)(ensemblef_1[i,(k+2)]=0)
      ensemblef_1[i,(k+2)]=round(ensemblef_1[i,(k+2)],digits=1)
   }			# simulation loop
}		# year loop
file_names1=paste(G_rain[no_rain],mon_names,"Forecast",v,"-mLag2.out",sep="")
title1=paste(n_simul," Ensembles from K-NN ",v,"-m lead (",name_p,")",sep="")
write(title1,file=file_names1,append=FALSE)
write(t(ensemblef_1),file=file_names1,ncol=(n_simul+2),append=TRUE,sep="\t")
file_names2=paste(G_rain[no_rain],mon_names,"Forecast",v,"-mLag2.Rdata",sep="")
save(ensemblef_1,file=file_names2)

fnames1=paste(G_rain[no_rain],mon_names,"Linear",v,"-mLag2.out",sep="")
title2=paste(n_simul," Ensembles from Linear Regression ",v,"-m lead (",name_p,")",sep="")
write(title2,file=fnames1,append=FALSE)
write(t(y_lnr),file=fnames1,ncol=(n_simul+2),append=TRUE,sep="\t")
fnames2=paste(G_rain[no_rain],mon_names,"Linear",v,"-mLag2.Rdata",sep="")
save(y_lnr,file=fnames2)
}		# lag loop

#-----------------------------------------------------------------------------------------------------------------------
# Now save the initial values
f_names=paste("InitialValue_GCM_",mon_names,".Rdata",sep="")
save(mon_names,pred_index,G_rain,no_rain,max_lag,n_simul,sy,ye,file=f_names)

#-----------------------------------------------------------------------------------------------------------------------